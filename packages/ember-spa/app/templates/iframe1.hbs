<h1>Iframe Route</h1>

<p>This renders the first React page inside of an iframe</p>

<div>
  Pros:
  <ul>
    <li>Will not inherit any css from the Ember app</li>
    <li>We can use things like a global context or React Router since we're dealing with a full-blown React app</li>
    <li>Development of this app could be completely separated from the context of being inside an Ember app</li>
    <li>Development could be faster since this uses Vite and we could start using more modern things</li>
  </ul>
</div>

<div>
  Cons:
  <ul>
    <li>Would likely need to duplicate the logic around authentication since it would be a separate application that could be loaded standalone if someone grabs the iframe url</li>
    <li>Passing data between apps could be much more difficult at best, impossible at worst (the user's locale, the user, their company, etc, similar to the point above)</li>
    <li>Deployment might be more difficult - we'd need to build two SPAs instead of one, and it'd be TBD where they would go (would we just put the dist of react into the dist of Ember in s3, have them be separate buckets, how would we link between them, etc)</li>
    <li>We can link to Ember pages and I have a proof-of-concept "ExternalLink.tsx", but it relies on using window.postMessage to communicate the intent of a transition and have the parent Ember app make the transition. Pretty hacky and would not work in the standalone React app.</li>
    <li>Similarly, react-router transitions would be invisible to the container Ember app. To better see the issue, click the React Page 2 react-router transition link below. You'll notice that the orange anchor in the sidebar does not update to "Iframe Route 2", nor does the url update. I'm sure we could do something in code for this, but would also be very hacky.</li>
  </ul>
</div>

<ReactIframe @src="http://localhost:3000/page1" />
